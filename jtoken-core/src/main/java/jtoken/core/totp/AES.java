package jtoken.core.totp;

import java.util.Arrays;

import jtoken.core.util.AlphaNumericUtils;

public class AES {

	private static final int[] SBox = { 99, 124, 119, 123, 242, 107, 111, 197,
			48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89,
			71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38,
			54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35,
			195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131,
			44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83,
			209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207,
			208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159,
			168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16,
			255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126,
			61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238,
			184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194,
			211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78,
			169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28,
			166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181,
			102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248,
			152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223,
			140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84,
			187, 22 };

	private static final int[] SBoxInv = { 82, 9, 106, 213, 48, 54, 165, 56,
			191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47,
			255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50,
			166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161,
			102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114,
			248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182,
			146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167,
			141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88,
			5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175,
			189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151,
			242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53,
			133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29,
			41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75,
			198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221,
			168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96,
			81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156,
			239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131,
			83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99,
			85, 33, 12, 125 };

	private static final int[] Rcon = { 1, 2, 4, 8, 16, 32, 64, 128, 27, 54,
			108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212,
			179, 125, 250, 239, 197, 145 };

	private static final int[] G2X = { 0x00, 0x02, 0x04, 0x06, 0x08, 0x0a,
			0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20,
			0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36,
			0x38, 0x3a, 0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c,
			0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x62,
			0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78,
			0x7a, 0x7c, 0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e,
			0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa4,
			0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba,
			0xbc, 0xbe, 0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0,
			0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6,
			0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc,
			0xfe, 0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09,
			0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05, 0x3b, 0x39, 0x3f, 0x3d, 0x33,
			0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
			0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f,
			0x4d, 0x43, 0x41, 0x47, 0x45, 0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71,
			0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65, 0x9b,
			0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d,
			0x83, 0x81, 0x87, 0x85, 0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7,
			0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5, 0xdb, 0xd9,
			0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3,
			0xc1, 0xc7, 0xc5, 0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5,
			0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5 };

	private static final int[] G3X = { 0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f,
			0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11, 0x30,
			0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d,
			0x24, 0x27, 0x22, 0x21, 0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a,
			0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71, 0x50, 0x53,
			0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44,
			0x47, 0x42, 0x41, 0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9,
			0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1, 0xf0, 0xf3, 0xf6,
			0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7,
			0xe2, 0xe1, 0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8,
			0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1, 0x90, 0x93, 0x96, 0x95,
			0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82,
			0x81, 0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80,
			0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a, 0xab, 0xa8, 0xad, 0xae, 0xa7,
			0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba,
			0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5,
			0xe6, 0xef, 0xec, 0xe9, 0xea, 0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4,
			0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda, 0x5b,
			0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46,
			0x4f, 0x4c, 0x49, 0x4a, 0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61,
			0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a, 0x3b, 0x38,
			0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f,
			0x2c, 0x29, 0x2a, 0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02,
			0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a };

	private static final int[] G9X = { 0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d,
			0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77, 0x90,
			0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 0xd8, 0xd1, 0xca, 0xc3,
			0xfc, 0xf5, 0xee, 0xe7, 0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d,
			0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c, 0xab, 0xa2,
			0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8, 0xc7,
			0xce, 0xd5, 0xdc, 0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49,
			0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01, 0xe6, 0xef, 0xf4,
			0xfd, 0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83,
			0x98, 0x91, 0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 0x05,
			0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a, 0xdd, 0xd4, 0xcf, 0xc6,
			0xf9, 0xf0, 0xeb, 0xe2, 0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3,
			0xaa, 0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad,
			0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b, 0x7c, 0x75, 0x6e, 0x67, 0x58,
			0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b,
			0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 0x9f, 0x96, 0x8d,
			0x84, 0xbb, 0xb2, 0xa9, 0xa0, 0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a,
			0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30, 0x9a,
			0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9,
			0xf6, 0xff, 0xe4, 0xed, 0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c,
			0x35, 0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d, 0xa1, 0xa8,
			0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0, 0xfb, 0xf2, 0xcd,
			0xc4, 0xdf, 0xd6, 0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e,
			0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46 };

	private static final int[] GBX = { 0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27,
			0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69, 0xb0,
			0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81, 0xe8, 0xe3, 0xfe, 0xf5,
			0xc4, 0xcf, 0xd2, 0xd9, 0x7b, 0x70, 0x6d, 0x66, 0x57, 0x5c, 0x41,
			0x4a, 0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12, 0xcb, 0xc0,
			0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa, 0x93, 0x98, 0x85, 0x8e, 0xbf,
			0xb4, 0xa9, 0xa2, 0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7,
			0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f, 0x46, 0x4d, 0x50,
			0x5b, 0x6a, 0x61, 0x7c, 0x77, 0x1e, 0x15, 0x08, 0x03, 0x32, 0x39,
			0x24, 0x2f, 0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc, 0xd5,
			0xde, 0xc3, 0xc8, 0xf9, 0xf2, 0xef, 0xe4, 0x3d, 0x36, 0x2b, 0x20,
			0x11, 0x1a, 0x07, 0x0c, 0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f,
			0x54, 0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6, 0xaf, 0xa4,
			0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e, 0x47, 0x4c, 0x51, 0x5a, 0x6b,
			0x60, 0x7d, 0x76, 0x1f, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2e,
			0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd, 0xd4, 0xdf, 0xc2,
			0xc9, 0xf8, 0xf3, 0xee, 0xe5, 0x3c, 0x37, 0x2a, 0x21, 0x10, 0x1b,
			0x06, 0x0d, 0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55, 0x01,
			0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30, 0x59, 0x52, 0x4f, 0x44,
			0x75, 0x7e, 0x63, 0x68, 0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b,
			0x80, 0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8, 0x7a, 0x71,
			0x6c, 0x67, 0x56, 0x5d, 0x40, 0x4b, 0x22, 0x29, 0x34, 0x3f, 0x0e,
			0x05, 0x18, 0x13, 0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb,
			0x92, 0x99, 0x84, 0x8f, 0xbe, 0xb5, 0xa8, 0xa3 };

	private static final int[] GDX = { 0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39,
			0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b, 0xd0,
			0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3, 0xb8, 0xb5, 0xa2, 0xaf,
			0x8c, 0x81, 0x96, 0x9b, 0xbb, 0xb6, 0xa1, 0xac, 0x8f, 0x82, 0x95,
			0x98, 0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0, 0x6b, 0x66,
			0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48, 0x03, 0x0e, 0x19, 0x14, 0x37,
			0x3a, 0x2d, 0x20, 0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e,
			0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26, 0xbd, 0xb0, 0xa7,
			0xaa, 0x89, 0x84, 0x93, 0x9e, 0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec,
			0xfb, 0xf6, 0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5, 0xbe,
			0xb3, 0xa4, 0xa9, 0x8a, 0x87, 0x90, 0x9d, 0x06, 0x0b, 0x1c, 0x11,
			0x32, 0x3f, 0x28, 0x25, 0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40,
			0x4d, 0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9, 0xb2, 0xbf,
			0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91, 0x0a, 0x07, 0x10, 0x1d, 0x3e,
			0x33, 0x24, 0x29, 0x62, 0x6f, 0x78, 0x75, 0x56, 0x5b, 0x4c, 0x41,
			0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42, 0x09, 0x04, 0x13,
			0x1e, 0x3d, 0x30, 0x27, 0x2a, 0xb1, 0xbc, 0xab, 0xa6, 0x85, 0x88,
			0x9f, 0x92, 0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa, 0xb7,
			0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94, 0xdf, 0xd2, 0xc5, 0xc8,
			0xeb, 0xe6, 0xf1, 0xfc, 0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49,
			0x44, 0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c, 0x0c, 0x01,
			0x16, 0x1b, 0x38, 0x35, 0x22, 0x2f, 0x64, 0x69, 0x7e, 0x73, 0x50,
			0x5d, 0x4a, 0x47, 0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff,
			0xb4, 0xb9, 0xae, 0xa3, 0x80, 0x8d, 0x9a, 0x97 };

	private static final int[] GEX = { 0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36,
			0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a, 0xe0,
			0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca, 0x90, 0x9e, 0x8c, 0x82,
			0xa8, 0xa6, 0xb4, 0xba, 0xdb, 0xd5, 0xc7, 0xc9, 0xe3, 0xed, 0xff,
			0xf1, 0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81, 0x3b, 0x35,
			0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11, 0x4b, 0x45, 0x57, 0x59, 0x73,
			0x7d, 0x6f, 0x61, 0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87,
			0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7, 0x4d, 0x43, 0x51,
			0x5f, 0x75, 0x7b, 0x69, 0x67, 0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b,
			0x19, 0x17, 0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 0x06,
			0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c, 0x96, 0x98, 0x8a, 0x84,
			0xae, 0xa0, 0xb2, 0xbc, 0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2,
			0xcc, 0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f,
			0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b, 0xa1, 0xaf, 0xbd, 0xb3, 0x99,
			0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb,
			0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 0xea, 0xe4, 0xf6,
			0xf8, 0xd2, 0xdc, 0xce, 0xc0, 0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c,
			0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20, 0xec,
			0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6, 0x9c, 0x92, 0x80, 0x8e,
			0xa4, 0xaa, 0xb8, 0xb6, 0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28,
			0x26, 0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56, 0x37, 0x39,
			0x2b, 0x25, 0x0f, 0x01, 0x13, 0x1d, 0x47, 0x49, 0x5b, 0x55, 0x7f,
			0x71, 0x63, 0x6d, 0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd,
			0xa7, 0xa9, 0xbb, 0xb5, 0x9f, 0x91, 0x83, 0x8d };

	private static final int[] ShiftBy = { 0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2,
			7, 12, 1, 6, 11 };

	private static final int[] ShiftByInv = { 0, 13, 10, 7, 4, 1, 14, 11, 8, 5,
			2, 15, 12, 9, 6, 3 };

	private static final int[] IV_ZERO = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0 };

	private int nk;

	private int nr;

	private int[][] xkey;

	private int[] iiv;

	private boolean encryptMode;

	public AES() {
		iiv = new int[16];
	}

	@Override
	protected void finalize() {
		destroy();
	}

	private static void subBytes(int[] in, int[] out, boolean encryptMode) {
		int[] s = encryptMode ? SBox : SBoxInv;

		for (int i = 0; i < 16; ++i) {
			out[i] = s[in[i] & 0xFF];
		}
	}

	private static void shiftRows(int[] in, int[] out, boolean encryptMode) {
		int[] shiftBy = encryptMode ? ShiftBy : ShiftByInv;

		for (int i = 0; i < 16; i++) {
			out[i] = in[shiftBy[i]];
		}
	}

	private static void mixColumns(int[] in, int[] out, boolean encryptMode) {
		if (encryptMode) {
			for (int c = 0; c < 4; c++) {
				int c4 = c << 2;

				out[c4] = G2X[in[c4]] ^ G3X[in[c4 + 1]] ^ in[c4 + 2]
						^ in[c4 + 3];
				out[c4 + 1] = in[c4] ^ G2X[in[c4 + 1]] ^ G3X[in[c4 + 2]]
						^ in[c4 + 3];
				out[c4 + 2] = in[c4] ^ in[c4 + 1] ^ G2X[in[c4 + 2]]
						^ G3X[in[c4 + 3]];
				out[c4 + 3] = G3X[in[c4]] ^ in[c4 + 1] ^ in[c4 + 2]
						^ G2X[in[c4 + 3]];
			}
		} else {
			for (int c = 0; c < 4; c++) {
				int c4 = c << 2;

				out[c4] = GEX[in[c4]] ^ GBX[in[c4 + 1]] ^ GDX[in[c4 + 2]]
						^ G9X[in[c4 + 3]];
				out[c4 + 1] = G9X[in[c4]] ^ GEX[in[c4 + 1]] ^ GBX[in[c4 + 2]]
						^ GDX[in[c4 + 3]];
				out[c4 + 2] = GDX[in[c4]] ^ G9X[in[c4 + 1]] ^ GEX[in[c4 + 2]]
						^ GBX[in[c4 + 3]];
				out[c4 + 3] = GBX[in[c4]] ^ GDX[in[c4 + 1]] ^ G9X[in[c4 + 2]]
						^ GEX[in[c4 + 3]];
			}
		}
	}

	private static void addRoundKey(int[] in, int[] out, int[][] words,
			int round) {
		for (int i = 0; i < 16; i++) {
			out[i] = in[i] ^ words[round][i];
		}
	}

	private static void xorBlocks(int[] block1, int[] block2, int[] out) {
		for (int i = 0; i < 16; i++) {
			out[i] = block1[i] ^ block2[i];
		}
	}

	private int[][] expandKey(int[] key) {
		int nrp1 = nr + 1;
		int nk2 = nrp1 << 2;

		int[][] w = new int[nk2][4];
		int[] temp = new int[4];

		for (int i = 0, i4 = 0; i < nk; ++i, i4 += 4) {
			w[i][0] = key[i4];
			w[i][1] = key[i4 + 1];
			w[i][2] = key[i4 + 2];
			w[i][3] = key[i4 + 3];
		}

		for (int i = nk; i < nk2; i++) {
			w[i][0] = 0;
			w[i][1] = 0;
			w[i][2] = 0;
			w[i][3] = 0;

			for (int t = 0; t < 4; t++) {
				temp[t] = w[i - 1][t];
			}

			int imodnk = i % nk;

			if (imodnk == 0) {
				rotWord(temp);
				subWord(temp);

				temp[0] ^= Rcon[(i / nk) - 1];
			} else if ((nk > 6) && (imodnk == 4)) {
				subWord(temp);
			}

			for (int t = 0; t < 4; t++) {
				w[i][t] = w[i - nk][t] ^ temp[t];
			}
		}

		int[][] flat = new int[nrp1][16];

		for (int i = 0, i4 = 0; i < nrp1; i++, i4 += 4) {
			for (int j = 0, k = 0; j < 4; ++j, k += 4) {
				int[] wj = w[i4 + j];

				flat[i][k] = wj[0];
				flat[i][k + 1] = wj[1];
				flat[i][k + 2] = wj[2];
				flat[i][k + 3] = wj[3];
			}
		}

		return flat;
	}

	private static void subWord(int[] w) {
		// apply SBox to 4-byte word w
		w[0] = SBox[w[0]];
		w[1] = SBox[w[1]];
		w[2] = SBox[w[2]];
		w[3] = SBox[w[3]];
	}

	private static void rotWord(int[] w) {
		int tmp = w[0];

		w[0] = w[1];
		w[1] = w[2];
		w[2] = w[3];
		w[3] = tmp;
	}

	private static void sliceAndPadBlock(int[] in, int offset, int[] out) {
		int len = in.length - offset;
		if (len < 16) {
			Arrays.fill(out, 16 - len);
		} else {
			len = 16;
		}

		System.arraycopy(in, offset, out, 0, len);
	}

	private void encryptBlock(int[] pblock, int[][] words, int[] cblock) {
		int[] temp = new int[16];

		addRoundKey(pblock, cblock, words, 0);

		for (int r = 1, maxr = nr + 1; r < maxr; ++r) {
			subBytes(cblock, temp, true);
			shiftRows(temp, cblock, true);

			if (r < nr) {
				mixColumns(cblock, temp, true);
			} else {
				System.arraycopy(cblock, 0, temp, 0, 16);
			}

			// last round? don't mixColumns
			addRoundKey(temp, cblock, words, r);
		}
	}

	private void decryptBlock(int[] cblock, int[][] words, int[] pblock) {
		int[] temp = new int[16];

		addRoundKey(cblock, pblock, words, nr);

		for (int round = nr - 1; round > -1; --round) {
			shiftRows(pblock, temp, false);
			subBytes(temp, pblock, false);

			addRoundKey(pblock, temp, words, round);

			if (round > 0) {
				mixColumns(temp, pblock, false);
			} else {
				System.arraycopy(temp, 0, pblock, 0, 16);
			}
		}
	}

	private int[] encrypt(int[] plain) {
		int plen = plain.length;

		// plaintext, key and iv as byte arrays
		int numblks = AlphaNumericUtils.ceildiv16(plen);
		int upblks = numblks; // (plen >> 4) + 1;

		int[][] blocks = new int[upblks][16];
		int[][] cblocks = new int[upblks][16];

		for (int i = 0; i < numblks; ++i) {
			sliceAndPadBlock(plain, i << 4, blocks[i]);
		}

		// if (numblks != upblks) {
		// Arrays.fill(blocks[numblks], 16);
		// }

		int[] temp = new int[16];
		int[] cipher = new int[upblks << 4];

		int[][] xkey = this.xkey;
		int[] iiv = this.iiv;

		for (int i = 0; i < upblks; ++i) {
			if (i == 0) {
				xorBlocks(blocks[0], iiv, temp);
			} else {
				xorBlocks(blocks[i], cblocks[i - 1], temp);
			}

			encryptBlock(blocks[i], xkey, cblocks[i]);
			System.arraycopy(cblocks[i], 0, cipher, i << 4, 16);
		}

		// wipe unused data
		Arrays.fill(temp, 0);

		for (int i = 0; i < upblks; ++i) {
			Arrays.fill(cblocks[i], 0);
			Arrays.fill(blocks[i], 0);
		}

		return cipher;
	}

	private int[] decrypt(int[] cipher) {
		int clen = cipher.length;
		int numBlocks = clen >> 4;

		int[][] cblocks = new int[numBlocks][16];
		int[] temp = new int[16];

		int[] plain = new int[numBlocks << 4];

		for (int i = 0; i < numBlocks; i++) {
			System.arraycopy(cipher, i << 4, cblocks[i], 0, 16);
		}

		int[][] xkey = this.xkey;
		int[] iiv = this.iiv;

		for (int i = numBlocks - 1, j = 0; i >= 0; i--, ++j) {
			decryptBlock(cblocks[i], xkey, temp);

			if (i == 0) {
				xorBlocks(temp, iiv, temp);
			} else {
				xorBlocks(temp, cblocks[i - 1], temp);
			}

			System.arraycopy(temp, 0, plain, j << 4, 16);
		}

		// wipe unused data
		Arrays.fill(temp, 0);

		for (int i = 0; i < numBlocks; ++i) {
			Arrays.fill(cblocks[i], 0);
		}

		return plain;
	}

	public void init(byte[] key, byte[] iv, boolean wipe, boolean encryptMode) {
		if (key == null) {
			throw new NullPointerException("key");
		}

		switch (key.length) {
		case 16:
			nr = 10;
			nk = 4;
			break;
		case 24:
			nr = 12;
			nk = 6;
			break;
		case 32:
			nr = 14;
			nk = 8;
			break;
		default:
			throw new IllegalArgumentException("illegal key length");
		}

		int[] ikey = new int[key.length];
		for (int i = 0, maxi = key.length; i < maxi; ++i) {
			ikey[i] = (key[i] & 0xFF);
		}

		xkey = expandKey(ikey);
		Arrays.fill(ikey, 0);

		int[] iiv = this.iiv;
		System.arraycopy(IV_ZERO, 0, iiv, 0, 16);

		if (iv != null) {
			for (int i = 0, maxi = iv.length; (i < maxi) && (i < 16); ++i) {
				iiv[i] = (iv[i] & 0xFF);
			}
		}

		this.encryptMode = encryptMode;

		if (wipe) {
			Arrays.fill(key, (byte) 0);
			if (iv != null) {
				Arrays.fill(iv, (byte) 0);
			}
		}
	}

	public void init(char[] key, byte[] iv, boolean wipe, boolean encryptMode) {
		if (key == null) {
			throw new NullPointerException("key");
		}

		switch (key.length) {
		case 16:
			nr = 10;
			nk = 4;
			break;
		case 24:
			nr = 12;
			nk = 6;
			break;
		case 32:
			nr = 14;
			nk = 8;
			break;
		default:
			throw new IllegalArgumentException("illegal key length");
		}

		int[] ikey = new int[key.length];
		for (int i = 0, maxi = key.length; i < maxi; ++i) {
			ikey[i] = key[i];
		}

		xkey = expandKey(ikey);
		Arrays.fill(ikey, 0);

		int[] iiv = this.iiv;
		System.arraycopy(IV_ZERO, 0, iiv, 0, 16);

		if (iv != null) {
			for (int i = 0, maxi = iv.length; (i < maxi) && (i < 16); ++i) {
				iiv[i] = (iv[i] & 0xFF);
			}
		}

		this.encryptMode = encryptMode;

		if (wipe) {
			Arrays.fill(key, (char) 0);
			if (iv != null) {
				Arrays.fill(iv, (byte) 0);
			}
		}
	}

	public void destroy() {
		for (int i = xkey.length - 1; i >= 0; --i) {
			Arrays.fill(xkey[i], 0); // wipe
			xkey[i] = null; // gc
		}

		xkey = null; // gc
		Arrays.fill(iiv, 0); // wipe

		nk = 0; // wipe
		nr = 0; // wipe
	}

	private byte[] encrypt(byte[] plain) {
		int[] iplain = new int[plain.length];
		for (int i = 0, maxi = plain.length; i < maxi; ++i) {
			iplain[i] = (plain[i] & 0xFF);
		}

		int[] icipher = encrypt(iplain);

		byte[] cipher = new byte[icipher.length];
		for (int i = 0, maxi = icipher.length; i < maxi; ++i) {
			cipher[i] = (byte) (icipher[i] & 0xFF);
		}

		Arrays.fill(iplain, 0);
		return cipher;
	}

	private byte[] decrypt(byte[] cipher) {
		int[] icipher = new int[cipher.length];
		for (int i = 0, maxi = cipher.length; i < maxi; ++i) {
			icipher[i] = (cipher[i] & 0xFF);
		}

		int[] iplain = decrypt(icipher);

		byte[] plain = new byte[iplain.length];
		for (int i = 0, maxi = iplain.length; i < maxi; ++i) {
			plain[i] = (byte) (iplain[i] & 0xFF);
		}

		Arrays.fill(icipher, 0);
		return plain;
	}

	public byte[] doFinal(byte[] data) {
		if (encryptMode) {
			return encrypt(data);
		}

		return decrypt(data);
	}
}
